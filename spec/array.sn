Speck.describe("Array") {
  .before(#each) {
    .strings: @("I", "really", "like", "milk")
    .integers: @(1,2,3,4,5)
    .floats: @(1.1,2.2,3.3,4.4,5.5)
  }
  
  .describe("select") {
    it("should get even and odd numbers") {
      .integers.select{ it % 2 = 0 }.should = @(2,4)
      .integers.select{ it % 2 = 1 }.should = @(1,3,5)
    }
  }
  
  .describe("reject") {
    it("should get even and odd numbers") {
      .integers.reject{ it % 2 = 0 }.should = @(1,3,5)
      .integers.reject{ it % 2 = 1 }.should = @(2,4)
    }
  }
  
  it("should detect an element") {
    .strings.detect{ it = "really" }.should = "really"
  }
  
  it("should know if it's empty") {
    .strings.empty?.should = false
    @().empty?.should = true
  }
  
  it("should reverse itself") {
/*    @("somebody", "set", "up", "us", "the", "bomb").reverse().should = @("bomb", "the", "us", "up", "set", "somebody")*/
  }
  
  .describe("inject") {
    it("should find the longest string in an array") {
      .strings.inject(nil) [longest,str] { // TODO: ARGUMENT_REFLECTION
        if (str.length > longest.length); str; else; longest; end
      }.should = "really"
    }
    
    it("should take an initial value") {
      .integers.inject(0, [sum,num] { sum + num }).should = 15
    }
    
    it("should do nothing when empty") {
      @().inject(nil) { throw(#function_called) }
      @().inject(0) { throw(#function_called) }
    }
  }
  
  .describe("sum") {
    it("should sum an array") {
      .integers.sum.should = 15
    }
    
    it("should preserve precision of numbers") {
      Speck.pending("float manipulation is nonexistent")
      .integers.sum.should = 15
        .floats.sum.should = 16.5
    }
  }
  
  .describe("convenience getters") {
    it("should return the first argument") {
      .integers.first.should = 1
    }
    
    it("should return the last argument") {
      .integers.last.should = 5
    }
  }
}
